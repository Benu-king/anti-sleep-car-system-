import cv2
import mediapipe as mp
import math
import serial
import time
from gtts import gTTS
from io import BytesIO
import pygame
arduino = serial.Serial('COM3', 9600, timeout=1)
time.sleep(2)
mp_face_mesh = mp.solutions.face_mesh
mp_drawing = mp.solutions.drawing_utils
face_mesh = mp_face_mesh.FaceMesh(refine_landmarks=True)

LEFT_EYE = [33, 160, 158, 133, 153, 144]
RIGHT_EYE = [362, 385, 387, 263, 373, 380]
CLOSED_THRESH = 0.25
closed_frames = 0
asleep = False

def eye_aspect_ratio(landmarks, eye_points, w, h):
    p1 = (int(landmarks[eye_points[0]].x * w), int(landmarks[eye_points[0]].y * h))
    p2 = (int(landmarks[eye_points[1]].x * w), int(landmarks[eye_points[1]].y * h))
    p3 = (int(landmarks[eye_points[2]].x * w), int(landmarks[eye_points[2]].y * h))
    p4 = (int(landmarks[eye_points[3]].x * w), int(landmarks[eye_points[3]].y * h))
    p5 = (int(landmarks[eye_points[4]].x * w), int(landmarks[eye_points[4]].y * h))
    p6 = (int(landmarks[eye_points[5]].x * w), int(landmarks[eye_points[5]].y * h))
    vertical_1 = math.dist(p2, p6)
    vertical_2 = math.dist(p3, p5)
    horizontal = math.dist(p1, p4)
    return (vertical_1 + vertical_2) / (2.0 * horizontal)

pygame.init()
pygame.mixer.init()
alert_sound = None

def play_alert_amharic(text):
    global alert_sound
    tts = gTTS(text=text, lang='am')
    fp = BytesIO()
    tts.write_to_fp(fp)
    fp.seek(0)
    alert_sound = pygame.mixer.Sound(fp)
    alert_sound.play(-1)  # loop while eyes closed

def stop_alert():
    if alert_sound:
        alert_sound.stop()
cap = cv2.VideoCapture(0)
CYBER_RED = (0, 0, 255)
CYBER_GREEN = (0, 255, 0)
CYBER_PURPLE = (255, 0, 255)

def glowing_text(frame, text, pos, color, scale=1.2, thickness=2):
    x, y = pos
    cv2.putText(frame, text, (x, y), cv2.FONT_HERSHEY_SIMPLEX, scale, (0,0,0), thickness*3, cv2.LINE_AA)
    cv2.putText(frame, text, (x, y), cv2.FONT_HERSHEY_SIMPLEX, scale, color, thickness, cv2.LINE_AA)
scan_y = 0
scan_direction = 1

while True:
    ret, frame = cap.read()
    if not ret:
        break
    h, w, _ = frame.shape
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb)
    overlay = frame.copy()
    cv2.rectangle(overlay, (0,0), (w,h), (0,0,40), -1)
    frame = cv2.addWeighted(frame, 0.7, overlay, 0.3, 0)
    if results.multi_face_landmarks:
        landmarks = results.multi_face_landmarks[0].landmark
        left_ear = eye_aspect_ratio(landmarks, LEFT_EYE, w, h)
        right_ear = eye_aspect_ratio(landmarks, RIGHT_EYE, w, h)
        ear = (left_ear + right_ear) / 2
        mp_drawing.draw_landmarks(
            image=frame,
            landmark_list=results.multi_face_landmarks[0],
            connections=mp_face_mesh.FACEMESH_TESSELATION,
            landmark_drawing_spec=None,
            connection_drawing_spec=mp_drawing.DrawingSpec(color=CYBER_RED, thickness=1, circle_radius=1)
        )
        scan_y += scan_direction * 5
        if scan_y >= h or scan_y <= 0:
            scan_direction *= -1
        x_min = int(min([lm.x for lm in landmarks]) * w)
        x_max = int(max([lm.x for lm in landmarks]) * w)
        y_min = int(min([lm.y for lm in landmarks]) * h)
        y_max = int(max([lm.y for lm in landmarks]) * h)
        if y_min <= scan_y <= y_max:
            cv2.line(frame, (x_min, scan_y), (x_max, scan_y), CYBER_PURPLE, 2)
        if ear < CLOSED_THRESH:
            closed_frames += 1
        else:
            closed_frames = 0
        if closed_frames > 10:
            text = "WARNING! EYES CLOSED"
            color = (0, 0, 255) 
            if not asleep:
                print("üö® Drowsiness detected ‚Üí STOP")
                arduino.write(b'S')
                arduino.flush()
                play_alert_amharic("·ä•·äï·âÖ·àç·çç·àÖ ·ä®·àò·å£ ·àò·ä™·äì·ãç·äï ·ä†·âÅ·àò·ãç ·ä†·â∂ ·â§·äï·ã´·àµ!")
                asleep = True
        else:
            text = "ALL GOOD"
            color = (0, 255, 0)
            if asleep:
                print("‚úÖ Eyes open ‚Üí GO")
                arduino.write(b'G')
                arduino.flush()
                stop_alert()
                asleep = False
  
        glowing_text(frame, text, (50, 120), color, scale=1.2)

    cv2.rectangle(frame, (20,20), (w-20,h-20), CYBER_RED, 2)
    cv2.imshow("CYBER AI CAR SAFETY SYSTEM", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
arduino.close()
stop_alert()
cv2.destroyAllWindows()
